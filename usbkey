#!/bin/bash

defaultEncryptedDriveName="keysandbackups"
if [ -z "$2" ]; then
    # no second parameter
    encryptedDriveName=$defaultEncryptedDriveName
else 
    # second paramter
    encryptedDriveName=$2
fi


function unlockUSBDrive {
    echo "Unlock your USBKey:"
    unlockOutput=$(udisksctl unlock -b /dev/disk/by-partlabel/${encryptedDriveName} 2>&1 >/dev/null)
    if  [[ $unlockOutput == *"already unlocked"* ]]; then
        echo "USBKey '$encryptedDriveName' already unlocked"
    elif [[ $unlockOutput == *"not permitted"* ]]; then
        echo "Passphrase for USBKey '$encryptedDriveName' incorrect" >/dev/stderr
    elif [[ $unlockOutput == *"Error looking up"* ]]; then
        echo "USBKey '$encryptedDriveName' not found" >/dev/stderr
        echo ""
        echo "It may be already locked, not plugged in, or shutdown"
        echo "If it's plugged in, remove and reinsert it then try again"
    else 
        mountOutput=$(udisksctl mount -b /dev/disk/by-label/${encryptedDriveName} 2>&1 >/dev/null)
        if [ $? -eq 0 ]; then
            echo "USBKey '$encryptedDriveName' unlocked and mounted"
        else
            echo "USBKey '$encryptedDriveName' failed to mount" >/dev/stderr
            echo $mountOutput >/dev/stderr
        fi
    fi
}

function loadSSHKey {
    unlockOutput=$(ssh-add /media/$USER/${encryptedDriveName}/id_rsa 2>&1 >/dev/null)
    if  [[ $unlockOutput == *"No such file or directory"* ]]; then
        echo "SSH Key not found"
        echo "Is your USBKey plugged in and unlocked?"
    else
        echo "SSH key loaded"
        echo ""
        echo "Note: Locking or shuting down your USBKey will not remove the SSH key"
        echo "It will persist until you end this terminal session"
    fi
}

function lockUSBDrive {
    unmountOutput=$(udisksctl unmount -b /dev/disk/by-label/${encryptedDriveName} 2>&1 >/dev/null)
    if  [[ $unmountOutput == *"Error looking up object"* ]]; then
        echo "Could not unmount USBKey '$encryptedDriveName'" >/dev/stderr
        echo "It may be already locked, not plugged in, or shutdown"
    else
        lockOutput=$(udisksctl lock -b /dev/disk/by-partlabel/${encryptedDriveName} 2>&1 >/dev/null)
        if [ $? -eq 0 ]; then
            echo "USBKey '$encryptedDriveName' unmounted and locked"
            echo "You may remove it now"
        else
            echo "Error: Count not lock USBKey '$encryptedDriveName'" >/dev/stderr
            echo ""
            echo "It may be already locked, not plugged in, or shutdown"
        fi
    fi
}

function shutdownUSBDrive {
    lockOutput=$(lockUSBDrive 2>&1 >/dev/null)
    # We assume it's either already locked or we need the error message for later
    shutdownOutput=$(udisksctl power-off -b /dev/disk/by-partlabel/${encryptedDriveName} 2>&1 >/dev/null)
    if [ $? -eq 0 ]; then
        echo "'$encryptedDriveName' shutdown"
        echo "You may remove it now"
    else
        echo $lockOutput >/dev/stderr
        echo ""
        echo "Error: '$encryptedDriveName' failed to shutdown" >/dev/stderr
    fi
}

function printSetupHelp {
    echo "USBKey device setup:"
    echo ""
    echo "Any removable storage device may become a USBKey"
    echo "Please follow the instructions in README.md"
    echo ""
    echo "The most up to date README.md can be found on the usbkey GitHub at:"
    echo "  https://github.com/JerichoJyant/usbkey"
}

if [ "$1" = "unlock" ]; then
	unlockUSBDrive
elif [ "$1" = "ssh" ]; then
    loadSSHKey
elif [ "$1" = "go" ]; then
    unlockUSBDrive
    echo ""
    loadSSHKey
elif [ "$1" = "lock" ]; then
	lockUSBDrive
elif [ "$1" = "shutdown" ]; then
    shutdownUSBDrive
elif [ "$1" = "setup" ]; then
    printSetupHelp
else
    echo "Usage: usbkey command [nameOfDrive]"
    echo "  [nameOfDrive] defaults to \"$defaultEncryptedDriveName\""
    echo ""
    echo "Commands:"
	echo "  unlock -- Decrypt and mount your USBKey"
	echo "  ssh -- Load SSH key from your USBKey"
	echo "  go -- Shortcut to run both 'unlock' and 'ssh'"
	echo ""
	echo "  lock -- Encrypt and unmount your USBKey"
	echo "  shutdown -- Encrypt, unmount, and disable your USBKey until removed and replaced"
    echo ""
    echo "  setup -- Show help for creating a USBKey"
fi